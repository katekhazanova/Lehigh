# @author ballmw

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 0) INTRODUCTION & INSTRUCTIONS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# This file (default-selfservice.properties) lists all the properties and default 
# values for Self-Service.  Do not use this file for customizing your 
# installation.  Settings changes should be made in the appropriate properties
# file (selfservice-audit.properties, selfservice-graph.properties, etc.)  
# 
# Please read the following IMPORTANT instructions before modifying this file.
#
# Changes to any properties file will not be recognized by the application until an 
# application restart.
#
# Properties files are in the standard Java .properties files format (http://en.wikipedia.org/wiki/.properties).
#
# Here's a short primer on the .properties file format along with some valuable tips.
#
# Properties files consist of parameters.  Each parameter is stored as a pair of 
# strings, one storing the name of the parameter (called the key), and the other 
# storing the value.  Each line in a .properties file normally stores a single property. 
# The format for a line is:
#    key=value
# For example, the following parameter has a key of "hello" and a value of "world":
#    hello=world
#
# If the first character on a line is the number sign (#), then the line is a comment.
#
# The backwards slash (\) is used for two things:
# * To continue a parameter definition onto another line (like when the definition is very long)
# * To preserve whitespace in the configuration (like when using a "blank" instcd of " ")
#
# Example of using \ to continue a parameter definition onto another line:
#    hello=big \
#          world!
# In the above example, the key is "hello" and the value is "big world" (notice 
# only one space between the "big" and "world").
#
# Example of using \ to preserve whitespace:
#    instcd=\   MU
# In the above example, the key is "instcd" and the value is "   MU" (with two spaces).
#
#
# CONTENTS:
# * General Settings- configure in selfservice.general.properties
# * Audit Settings - configure in selfservice-audit.properties
#   * View Settings
#   * Submit Settings
# * Graph Settings- configure in selfservice-graph.properties
# * Student Settings - configure in selfservice-student.properties
# * Jdbc Database Settings - configure in selfservice-database.properties
# * Hibernate Database Settings  - configure in selfservice-database.properties
# * Connection Pool Database Settings  - configure in selfservice-database.properties
# * Security Settings - configure in selfservice-security.properties
# * Debug Settings - configure in selfservice-debug.properties
# * Miscellaneous Settings - configure in selfservice-misc.properties
# * Batch Settings - configure in selfservice-batch.properties
# * Quartz Settings - for running Batch audits


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1) GENERAL SETTINGS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Home directory for Self-Service, where index related files will be stored and looked up
home.dir=

# The instidq your institution uses.
uachieve.selfservice.instidq=

# The instid your institution uses.
# use WORKSHOP for transfer evals (student id: TAS-COURSES1), TEST40 for audits (student id: 654328) 
# use "MIAMI   " for dprogs (student id: WSH-1997)
uachieve.selfservice.instid=

# The different instcd's that will be available.  The format is simple.  Instcd's are defined
# using an actual instcd value, plus a name to describe that instcd to the user (like "MU" and "Miami University").
# The instcd and name are separated by a colon (:) and each instcd/name pair are separated by a comma (,).
# Optionally, you can have a single instcd/name pair per by using the backslash (\) to continue
# the definitions on the next line.  
#
# Here's the formal syntax: 
# 	<instcd1>:<name1>,<instcd2>:<name2>, etc...
#
# Here's an example of several instcd's configured:
# uachieve.selfservice.instcds=\ :Default College,\
#                              TRA:redLantern College,\
#                              CMP:Computer Design,\
#                              MED:Medical School
uachieve.selfservice.instcds=

# Determines whether the instcd or just the instcd label is displayed in dropdowns
uachieve.selfservice.showInstcd=true

# Determines if students get a default institution from the configs or sees the select institution page
# this does not apply to properties if a student has multiple institution properties they will still
# have to choose an institution
uachieve.selfservice.useDefaultInstitution=true

# This is what self service will call different instcd's in the UI.
uachieve.selfservice.instcd.label=School

# The name of the application that users will see site-wide.
uachieve.selfservice.applicationName=u.achieve Self-Service

# The image to use as the header on every page.  If you have an image hosted externally, you
# may enter the absolute URL for it, like http://www.onlinephd.edu/static/logo.png
# If you wish to host the image inside of self service, place it in the /images directory.
# The image used should be a height of 67 pixels and a maximum width of 300 pixels
# for the best appearance.
uachieve.selfservice.applicationLogo=/images/logo.png

# Determines where Students are taken when they log in.  The default behavior is to route
# them to the view audit page ("/audit/read.html").  To redirect to another page, update the value
# to, say, "/course/list.html". This url must be relative to the self service application.  
uachieve.selfservice.studentLoginSuccessUrl=/general/auditroute.html

# Determines where users are taken when they log out.  The default behavior is to route
# them back to the login page ("/general/login.html").  To redirect to another page, update the value
# to, say, "http://www.yourschool.edu".
uachieve.selfservice.logoutSuccessUrl=/general/login.html

# Formatting for the link used by u.achieve self service to link to your course catalog.
# Change to the link that your institution uses for its course catalog, placing:
#   @{department} - in the spot where the department goes
#   @{number} - in the spot where the course number goes
# Here's how an example courseCatalogLink might look:
#   http://www.onlinephd.com/courses/@{department}/@{number}.html
uachieve.selfservice.courseCatalogLink=http://www.miami.muohio.edu/documents_and_policies/bulletin04/courses/@{department}.cfm#@{number}

# When building course catalog links, course names ("MTH") are converted to 
# lowercase ("mth") if set to false. Set to true to preserve the original case of 
# course names.
uachieve.selfservice.courseCatalogLink.preserveCase=true

#Base url to U.Direct to link U.Direct and Selfservice
udirect.baseurl=

#Base url to U.Schedule to link U.Schedule and Selfservice
schedule.builder.baseUrl=

#Base url to Collegesource Security
collegeSource.security.baseurl=

#Base url dashboard
dashboard.baseurl=

# External help text URLs. If URL is not set, then the default help
# text is displayed. Setting the uachieve.selfservice.advisorHelpUrl
# displays help text specific for advisors. Setting the  
# uachieve.selfservice.studentHelpUrl displays help text specific for
# students.
uachieve.selfservice.advisorHelpUrl=
uachieve.selfservice.studentHelpUrl=
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2) AUDIT SETTINGS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Audit settings consist of 3 categories:
# * general settings (2.1 - General Settings)
# * settings that affect the apperance of the audit reqeust screen (2.2 - View Settings)
# * settings that affect how an audit request is submitted to the u.achieve server (2.2 - Submit Settings) 

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2.1) GENERAL SETTINGS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Determines how many completed audit requests will be displayed
#
# If the total number of audits is less than the audit preserve count, 
# all audits will be displayed.
# To display all completed audits, set audit preserve count to -1
# No audits will be automatically deleted.
# Schools are encouraged to configure batch audit deletion using
# the u.achieve server.
uachieve.selfservice.audit.auditDisplayCount=-1

# Determines if the jobid will be displayed when viewing an audit.
uachieve.selfservice.audit.showJobId=true

# Determines if the interactive charts are displayed. 
uachieve.selfservice.audit.showCharts=true

# Determines if the course history tab is displayed on the audit results screen
uachieve.selfservice.audit.showCourseHistory=true

# Determines if the applied markers tab is displayed on the audit results screen
uachieve.selfservice.audit.showMarkers=true

# Determines if the applied exceptions tab is displayed on the audit results screen
uachieve.selfservice.audit.showExceptions=true

#set the delimiter for the data used on the what if markers page
#must be something not used in the audit data to work properly
uachieve.selfservice.audit.delimiter=|

# Determines what titles are shown at the top of the audit view screen and on Program Matcher.
# Possible values are dptitle1, dptitle2, and webtitle
uachieve.selfservice.audit.dpTitles=webtitle

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2.2) VIEW SETTINGS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The following settings concern the appearance of the audit request screen.

# Configures which COM key should be used when running audits.
#
# There are five different strategies available for resolving the appropriate
# comKey to use when running audits:
# * sync - the comKey used will be the current user's instcd
# * dropdown - the comKey used will be chosen by the user from a dropdown
# * mapped - the comKey used will be determined by the user's instcd via a lookup
# * static - the comKey used will be the one configured
# * instidMapped - the comKey used will be determined by the user's instid and instcd via a lookup.
# Examples:
#
# Use the sync option:
#       uachieve.selfservice.audit.advisor.comKey=sync
#
# Use the dropdown option:
#       uachieve.selfservice.audit.advisor.comKey=dropdown:999:DARSweb,\
#                                                  BUS:Business,\
#                                                  ENG:Engineering,\
#                                                  WIP:No IP Courses
#
# Use the mapped option:
#       uachieve.selfservice.audit.advisor.comKey=mapped:TST:999,\
#                                                MU:MU,\
#                                                BUS:BUS,\
#                                                ENG:ENG
#
# Use the static option:
#       uachieve.selfservice.audit.comKey=BUS
# Use the instid mapped option:
#uachieve.selfservice.audit.advisor.comKey=instidMapped:TEST40-\ :SSIKE,TEST40-TST:SSIKE,TEST40-MU:SSIKE,TEST40-BUS:SSIKE,\
#											TEST40-ENG:SSIKE,007104-\ :SSFER
#uachieve.selfservice.audit.comKey=dropdown:999:DARSweb,\
#                                           BUS:Business,\
#                                           ENG:Engineering,\
#                                           WIP:No IP Courses
#uachieve.selfservice.audit.comKey=ONL
#uachieve.selfservice.audit.comKey=MMM
uachieve.selfservice.audit.student.comKey=dropdown:SSIKE:SSIKE,40TST:40TST,ONL:ONL
uachieve.selfservice.audit.advisor.comKey=dropdown:SSIKE:SSIKE,40TST:40TST,ONL:ONL
#uachieve.selfservice.audit.comKey=40TST

uachieve.selfservice.audit.dropdown.comKey=ONL

# Designate a default COMKEY to be used, when not found in users COM, that MUST HAVE the following COM values defined :
#
# instidq
# instid
# instcd
# deptbgn
# deptend
# crsbgn
# crsend
# cmprbgn
# cmprend
# 
# Default COMKEY may be used in Program Matcher and loading of Student Default Degree programs when above COMKEY strategy is dropdown.

uachieve.selfservice.audit.default.comKey=ONL

# Determines whether or not to look at the COM for CURYT for Program Matcher. False will use the Term Service instead.
uachieve.selfservice.audit.getCurytFromCom=false

# Determines which condition codes will trigger Program Matcher to ignore a course.
# They should not be separated by any character.
uachieve.selfservice.audit.ignoreCONDC=

# Determines the maximum time in milliseconds that Program Matcher will run for a student.
uachieve.selfservice.audit.programMatcherTimeout=60000

# Determines how often the "Manage Audits" and "Audit Loading" pages will automatically 
# refresh.  Time specified is in seconds.
uachieve.selfservice.audit.auditPollingRate=3

# Determines how many times an audit will be polled for completion before an error
# screen is shown that warns the audit is taking a long time.
uachieve.selfservice.audit.maxPollCount=5

# Experimental. Determines if the audit view will use special effects when expanding and 
# collapsing requirements.  If set to true, requirements will smoothly "fade out" 
# when closed.  If set to false, requirements will disappear with no animation.
uachieve.selfservice.audit.specialEffects=false

# How many times to check for a complete audit before throwing an error.
# This property works in tandem with the sleepBetweenTries property below.
# For example, if tries is set to 5 and sleepBetweenTries is set to 2000 (2 seconds), 
# an error will be thrown if the requested audit doesn't complete in 10 seconds.
uachieveapi.audit.request.tries=4

# How long to wait between checks for audit completion (in milliseconds, so 1000 = 1 second).
# Tune this according to the specific environment u.achieve is running in.
# This property works in tandem with the tries property above.
uachieveapi.audit.request.sleepBetweenTries=2000

# Allow users to run audits using the student's default degree programs.
uachieve.selfservice.audit.allowDefaultDegreePrograms=true

# Allow users to run what-if audits.
# permit_custom_audit
uachieve.selfservice.audit.allowWhatIfDegreePrograms=true

# Allow users to toggle major/minor functionality for what-if audits.
uachieve.selfservice.audit.allowWhatIfMajorMinor=true

# Determines how the degree program will be selected by the user when submitting an audit.
# There are three settings: manual, dropdown, and cascade.
#
# * manual:   user must manually type in a degree program code
# * dropdown: user can choose a degree program from a dropdown list generated 
#				based on the current instcd
# * cascade:  user can choose a degree program from a series of hierarchical 
#				dropdown lists (college/major/degree)
#				NOTE: the cascade option requires that information be encoded 
#				in the Degree Programs within DARwin.
#
# In addition, the dropdown and cascade settings allow additional settings that influence
# what data is displayed in the dropdown(s).
#   
# The first extra setting determines the dpstatus value(s) that degree programs must
# have to be included in the dropdown list.  Available options are: "W", "P", "T", and "A".
# You may use as many of these as you like by separating each one with a comma.
#
# The second extra setting determines which columns of the degree program will be displayed
# in the dropdown.  Available options are: "dprog", "dptitle1", "dptitle2", and "webtitle".
# You may use as many of these as you like by separating each one with a comma.
#
# The final extra setting only applies to the "cascade" option.  It determines the
# dropdowns that will be displayed.  Available options are: "college", "major", and "degree".
# You may use as many of these as you like by separating each one with a comma.
#
# Example of using the "manual" setting:
#	uachieve.selfservice.audit.degreeProgramEntry=manual
#
# Example of using "dropdown" setting, only showing degree programs with a dpstatus of
# "P" or "A" and displaying the dptitle1 and dprog fields in the dropdown:
#	uachieve.selfservice.audit.degreeProgramEntry=dropdown:P,A:dptitle1,dprog
#
# Example of using "cascade" setting, only showing degree programs with a dpstatus of
# "W", "P", or "T", displaying the webtitle fields in the dropdown, and displaying all 
# three dropdowns (college/major/degree):
#	uachieve.selfservice.audit.degreeProgramEntry=cascade:W,P,T:webtitle,dprog:college,major,degree
uachieve.selfservice.audit.degreeProgramEntry=dropdown:W,P,T,A:webtitle,dprog
#uachieve.selfservice.audit.degreeProgramEntry=cascade:W,A:webtitle:dprog,college,major,degree
#uachieve.selfservice.audit.degreeProgramEntry=cascade:W,P,T,A:dptitle1,webtitle,dprog:college,major,degree
#uachieve.selfservice.audit.degreeProgramEntry=manual

# Determines which TYPE_CODEs that Program Matcher will use to determine which Programs to show
uachieve.selfservice.audit.programMatcherTypeCodes=PRG,,MAJ,MIN

# Determines whether the audit requirements should be collapsed when the audit 
# initially loads (standard view)
uachieve.selfservice.audit.standardView.autoCollapse=true

# Determines whether the audit requirements should be collapsed when the audit 
# initially loads (printer-friendly view)
uachieve.selfservice.audit.printerView.autoCollapse=false

#Label identifying degree programs
uachieve.selfservice.audit.degree.label=Degree

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2.3) SUBMIT SETTINGS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The following settings concern how audits are submitted to the u.achieve server.

# Determines what type of audits students and advisors can run. 
# A will run an audit and evaluate transfer courses.
# D will run an audit only.
# E will evaluate transfer courses only.
# S will run an audit with a course sort
# C will run a course gpa and credit conversion
# H will run a home articulation
# evalsw settings are defined using an actual evalsw value, plus a name to describe that setting to the user 
# (like "A" and "Audit and Evaluation").  The value and name are seperated by a colon (:) and each value/name
# pair is separated by a comma (,).  
# Optionally, you can have a single evalsw/name pair per line by using the backslash (\) to continue
# the definitions on the next line.  

# Here's the formal syntax: 
# 	<evalsw1>:<name1>,<evalsw2>:<name2>, etc...
#
# Here's an example of several settings configured:
# uachieve.selfservice.audit.evalsw.student=D:Degree Audit,A:Audit and Evaluation,H:Home Articulation

uachieve.selfservice.audit.evalsw.student=D:D-Degree Audit
uachieve.selfservice.audit.evalsw.advisor=D:D-Degree Audit

# Default evalsw is used in Program Matcher when requesting Audits.
uachieve.selfservice.audit.default.evalsw=D

# The evalsw value to use when submitting transfer evaluations
uachieve.selfservice.audit.transfer.evalsw=E

# Log level to use in the server when running an audit
# Possible values are:
# T - Trace
# D - Debug (produces a full dump)
# I - Info
# W - Warn
# E - Error
# F - Fatal
# O - Off (none)
uachieve.selfservice.audit.serverLogLevel=I

# The operator ID to use when running an audit for a student or advisor.  
# Also, users can only see audits run by the same operator ID.
# Set to {{*}} to allow users to see audits run by any operator ID.
# Maximum of 8 characters allowed.
# Can be overridden using SECURE_SOPRID properties in the 
# CollegeSource security application.
uachieve.selfservice.audit.soprid.student=*
uachieve.selfservice.audit.soprid.advisor=*
#uachieve.selfservice.audit.soprid.student=student
#uachieve.selfservice.audit.soprid.advisor=advisor

# The same name as your u.achieve Server daemon server name.
uachieve.selfservice.audit.serverName=40test
#uachieve.selfservice.audit.serverName=CHRIS40

# The status of the audit when it enters the job_queue_list table.  This should
# be set to N unless you need to do custom preprocessing.  
uachieve.selfservice.audit.startingStatus=N

# The priority of audits submitted through Self Service
uachieve.selfservice.audit.priority=100

#Allow the audit to submit with duplicate Dprogs
uachieve.selfservice.audit.allowDuplicateDprogs=false

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 3) GRAPH SETTINGS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Specifies whether or not graphs should be animated.  If true, a small animation will
# be shown when the graph is first displayed.  Only works when the graph produced is Flash.
uachieve.selfservice.graph.animate=true

# Sets the maximum number of decimal places to show for gpa graph data
uachieve.selfservice.graph.gpa.decimalPlaces=3

# Sets whether the maximum number of decimal places will always be shown on gpa graphs
uachieve.selfservice.graph.gpa.showAllDecimals=false

#Sets whether the the gpa on the graphs should be truncated rather than rounded
uachieve.selfservice.graph.gpa.truncate=true

# Sets the maximum number of decimal places to show for credit hour graph data
uachieve.selfservice.graph.hour.decimalPlaces=1

# Sets whether the maximum number of decimal places will always be shown on credit hour graphs
uachieve.selfservice.graph.hour.showAllDecimals=false

#Label shown at the bottom of the pie chart and the academic progress stacked bar char
uachieve.selfservice.graph.hour.label=Hours

#Label shown at the bottom of the vertical bar chart and the academic progress bar char
uachieve.selfservice.graph.gpa.label=GPA
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 4) STUDENT SETTINGS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# The minimum number of characters contained in the firstName and lastName fields
# combined that must be entered to allow a search to continue.
uachieve.selfservice.student.search.minAllowableSearchLength=2

# Display the current student's name in the toolbar in the top right 
# corner of every page?
uachieve.selfservice.student.display.studentName=true

# Display the current student's ID in the toolbar in the top right 
# corner of every page?
uachieve.selfservice.student.display.studentNumber=true

# Display an adviser's list of advisees on the student search page?
# If the user has no assigned advisees, no list will be shown
uachieve.selfservice.student.displayAdvisees=false

#Make the sudent ID uppercase on the studnet search, create, and edit pages
uachieve.selfservice.student.uppercaseStuno=true

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 5) JDBC DATABASE SETTINGS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Name of the JDBC driver to use.
# Examples:
# * Oracle: oracle.jdbc.driver.OracleDriver
# * Microsoft MSSQL (using jTDS): net.sourceforge.jtds.jdbc.Driver
# * DB/2: COM.ibm.db2.jdbc.app.DB2Driver
#fluffy
uachieve.selfservice.jdbc.driver=net.sourceforge.jtds.jdbc.Driver

# JDBC formatted URL of your database.
# Examples:
# * Oracle: jdbc:oracle:thin:@<HOST>:<PORT>:<SID>
# * Microsoft MSSQL (using jTDS):  jdbc:jtds:<server_type>://<server>[:<port>][/<database>][;<property>=<value>[;...]] 
# * DB/2: jdbc:db2://<HOST>:<PORT>/<DB>
uachieve.selfservice.jdbc.url=

# Username and password for logging to the u.achieve database
uachieve.selfservice.jdbc.username=
uachieve.selfservice.jdbc.password=

uachieve.selfservice.jdbc.jndi=

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 6) HIBERNATE DATABASE SETTINGS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Configures the database dialect (Oracle, MSSQL, etc).  Choose one of the 
# following:
#
# 	DB/2					org.hibernate.dialect.DB2Dialect
#	Oracle (any version)	org.hibernate.dialect.OracleDialect
#	Oracle 9i/10g			org.hibernate.dialect.Oracle9Dialect
#	Sybase					org.hibernate.dialect.SybaseDialect
#	Microsoft SQL Server	org.hibernate.dialect.SQLServerDialect
uachieveapi.hibernate.dialect=org.hibernate.dialect.SQLServerDialect

udirect.hibernate.dialect=org.hibernate.dialect.SQLServerDialect
udirect.hibernate.show_sql=true
udirect.hibernate.bytecode.use_reflection_optimizer=true
udirect.hibernate.generate_statistics=false

# Should view names (vw_stu_master and vw_stu_demo) be used for student tables?
# Usually this is set to true so that student data can be stored in seperate 
# tables and referenced through views. 
uachieveapi.hibernate.useViews=true

# Determines whether SQL should be printed to log files (helpful for debugging).
uachieveapi.hibernate.show_sql=true

# Performance booster - if you have problems with database access, try 
# setting this to false.
uachieveapi.hibernate.cglib.use_reflection_optimizer=true

# Performance booster - leave set to true.
uachieveapi.hibernate.use_query_cache=true

# If enabled, Hibernate will collect statistics useful for performance tuning.
uachieveapi.hibernate.generate_statistics=false

# May be used to completely disable the second level cache, which is 
# enabled by default for classes which specify a <cache> mapping.
uachieveapi.hibernate.use_second_level_cache=true




# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 7) CONNECTION POOL DATABASE SETTINGS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# The initial number of connections that are created when the pool
# is started.
uachieve.selfservice.jdbc.initialSize=1

# The maximum number of active connections that can be allocated from
# this pool at the same time, or zero for no limit.
uachieve.selfservice.jdbc.maxActive=0

# The maximum number of active connections that can remain idle in the
# pool, without extra ones being released, or zero for no limit.
uachieve.selfservice.jdbc.maxIdle=20

# The maximum number of milliseconds that the pool will wait (when there
# are no available connections) for a connection to be returned before
# throwing an exception, or -1 to wait indefinitely.
uachieve.selfservice.jdbc.maxWait=10000

# The minimum number of active connections that can remain idle in the
# pool, without extra ones being created, or 0 to create none.
uachieve.selfservice.jdbc.minIdle=0

# The indication of whether connections will be validated before being
# borrowed from the pool.  If the connection fails to validate, it will be
# dropped from the pool, and we will attempt to borrow another.
uachieve.selfservice.jdbc.testOnBorrow=true

# The indication of whether connections will be validated before being
# returned to the pool.
uachieve.selfservice.jdbc.testOnReturn=false

# The indication of whether connections will be validated by the idle connection
# evictor (if any).  If a connection fails to validate, it will be dropped
# from the pool.
uachieve.selfservice.jdbc.testWhileIdle=false

# The SQL query that will be used to validate connections from this pool
# before returning them to the caller.  If specified, this query
# MUST be an SQL SELECT statement that returns at least
# one row.
#
# MSSQL: select 1
# DB/2: select 1
# Oracle: select 'validationQuery' from dual
#fluffy
uachieve.selfservice.jdbc.validationQuery=select 1

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 8) SECURITY SETTINGS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Tells the application whether or not to use the default if no password is provided
# when logging in
uachieve.selfservice.security.login.useDefaultPassword=false

# Value of the password used for logging in if no value is provided
uachieve.selfservice.security.login.defaultPassword=CHANGE_ME_TO_SOMETHING_SECURE

# Controls whether users can access the login page to login.  If users should only be able
# to access Self Service via a link from another application, set this to false.
uachieve.selfservice.security.login.allowAccessToLoginPage=true

# Controls whether self-service can be run as a frame in another webpage.  If
# cross-frame scripting vulnerabilities are a concern, set this to true
uachieve.selfservice.security.disableFrames=false

# The application code for self-service
uachieve.security.appid=SS

#selfservice app name
app.config.code=SS

#app codes for updating in dashboard
collegesource.update.code=CS
dashboard.update.code=D2
selfservice.update.code=SS
udirect.update.code=UD
schedulebuilder.update.code=SB


# Security database connection parameters.  Fill these out ONLY if the security tables
# are NOT in the same database as the u.achieve ones. In doing so, you MUST
# also make sure to change jdbc-ctx.xml from using an alias datasource for Security
# to using its own security.dataSource.
uachieve.security.jdbc.driver=
uachieve.security.jdbc.url=
uachieve.security.jdbc.username=
uachieve.security.jdbc.password=

# Controls whether parameters in direct audit links should be url encoded/decoded during the 
# encryption/decryption process
uachieve.selfservice.security.urlEncode=false

# Controls whether directly linking to an audit is allowed or not
uachieve.selfservice.security.allowDirectAuditLink=false

#Policy to control input validation for the comments text field
uachieve.antisamyFileName=antisamy-slashdot-1.4.4.xml

# Name of the request parameter that holds the username when a user logs in, either via
# the login screen or a link from another application
uachieve.selfservice.security.login.usernameParameter=j_username

# Name of the request parameter that holds the password when a user logs in, either via
# the login screen or a link from another application
uachieve.selfservice.security.login.passwordParameter=j_password

security.defaultUserGroup=ROLE_ANONYMOUS

security.filter.removeHtmlEncoding=false
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 9) DEBUG SETTINGS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Signifies the system is in debug mode.  It's helpful to set this to true 
# during development as it causes a few things (like xml and class files)
# to be reloaded automatically on each request.  This should always be 
# set to false in production.
uachieve.selfservice.debug=false

# Set a flat file to load the audit from (instead of loading it from the database).
# Useful for debugging.  This file will only be used when uachieve.selfservice.debug is 
# set to true and a file name is specified.
uachieve.selfservice.debug.auditFile=

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 10) MISCELLANEOUS SETTINGS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Determines if the HTML sent to clients will be compressed for faster download.  
# This should typically be set to true, but if it is causing problems it can be 
# turned off by setting to false.
uachieve.selfservice.gzip=true

# Enable or disable caching of templates.  If true, caching is enabled. Disable 
# this (set to false) only for debugging and development.
uachieve.selfservice.freemarker.cache=false

# Set the time in seconds that must elapse before checking whether there is a 
# newer version of a template file. Set to 0 to check every time - only
# do this during debugging and development.  Set to a high value in production, 
# like  86400 (24 hours).
uachieve.selfservice.freemarker.templateUpdateDelay=0

#wild card character used when looking up catalogcourse information
wildcard.character=*

uachieve.selfservice.catalogcourse.hour=Hour

uachieve.selfservice.catalogcourse.availabilityLabel=Course Availability

#show settings for the different peices of the catalogcourse description page
uachieve.selfservice.catalogcourse.showCourseCatalogLink=true
uachieve.selfservice.catalogcourse.showDepartment=true
uachieve.selfservice.catalogcourse.showCourseNumber=true
uachieve.selfservice.catalogcourse.showHours=true
uachieve.selfservice.catalogcourse.showDescription=true
uachieve.selfservice.catalogcourse.showPreCoReqDisplay=true
uachieve.selfservice.catalogcourse.showAvailability=true
uachieve.selfservice.catalogcourse.showTitle=true

#the max term code that will be checked for availability on the catalogcourse description page
uachieve.selfservice.catalogcourse.maxYearTermCode=000000

#names of any customs feilds that you want displayed with the catalogcourse description 
uachieve.selfservice.catalogcourse.customProperty1 = 
uachieve.selfservice.catalogcourse.customProperty2 = 
uachieve.selfservice.catalogcourse.customProperty3 = 
uachieve.selfservice.catalogcourse.customProperty4 = 

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 11) BATCH SETTINGS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#Prefix to append to the jobid of Batch audits
uachieve.selfservice.batch.jobid.prefix=BAT

#Priority for Batch Audit Requests
uachieve.selfservice.batch.priority=100

#Initial status of the audit
uachieve.selfservice.batch.startingStatus=N

#Username to submit with batch audit requests
uachieve.selfservice.batch.userId=BARS

#Max number of audits to be run in a single batch.  Set to -1 if
#you do not want to limit the number of audits.
uachieve.selfservice.batch.maxAudits=-1

# Log level to use in the server when running a batch audit
# Possible values are:
# T - Trace
# D - Debug (produces a full dump)
# I - Info
# W - Warn
# E - Error
# F - Fatal
# O - Off (none)
uachieve.selfservice.batch.serverLogLevel=W

# If if batch contains at least this many audits, a warning message will
# be triggered before the batch is run manually.
uachieve.selfservice.batch.warnSize=1

# Determines how often the "Batch Definition" page will automatically 
# refresh.  Time specified is in seconds.
uachieve.selfservice.batch.batchPollingRate=3

uachieve.selfservice.batch.dataSources=DARWINDS:DARWin

#============================================================================
# Batch Clean Up
#============================================================================
bars.quartz.scheduler.schedule.cleanup = false
bars.quartz.scheduler.schedule.cleanup.cronexpression = 0 * 09 * * ?

#============================================================================
# Text to PDF Audit Conversion
#============================================================================

#Font size for one-column text audit to PDF conversions
uachieve.selfservice.batch.portraitFontSize=10

#Font size for two-column text audit to PDF conversions
uachieve.selfservice.batch.landscapeFontSize=9

#Whether to add a blank page when exporting all text audits to a pdf file
uachieve.selfservice.batch.addBlankPage=false

#Content type to use when displaying text pdf file in browser
uachieve.selfservice.batch.contentType=application/pdf

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 12) QUARTZ SETTINGS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#============================================================================
# Configure Main Scheduler Properties  
#============================================================================
org.quartz.scheduler.instanceName = BARSScheduler
org.quartz.scheduler.instanceId = AUTO
org.quartz.jobStore.selectWithLockSQL=SELECT * FROM {0}LOCKS UPDLOCK WHERE LOCK_NAME = ?

#============================================================================
# Configure ThreadPool  
#============================================================================
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount = 3
org.quartz.threadPool.threadPriority = 4


#============================================================================
# Configure JobStore  
#============================================================================
org.quartz.jobStore.misfireThreshold = 5000
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
org.quartz.jobStore.useProperties = false
org.quartz.jobStore.dataSource = BATCHDS
org.quartz.jobStore.tablePrefix = QRTZ_
org.quartz.jobStore.isClustered = false

org.quartz.dataSource.BATCHDS.driver =
org.quartz.dataSource.BATCHDS.URL =
org.quartz.dataSource.BATCHDS.user =
org.quartz.dataSource.BATCHDS.password = 